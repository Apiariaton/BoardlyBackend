// <auto-generated />
using System;
using CSharpBackend.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CSharpBackend.Migrations
{
    [DbContext(typeof(CSharpBackendDBContext))]
    [Migration("20240304130646_Amend BoardGames database to omit price")]
    partial class AmendBoardGamesdatabasetoomitprice
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CSharpBackend.API.Models.Domain.BoardGame", b =>
                {
                    b.Property<Guid>("BoardGameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BoardGameBuyUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BoardGameDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BoardGameGenre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BoardGameName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BoardGameId");

                    b.ToTable("BoardGames");

                    b.HasData(
                        new
                        {
                            BoardGameId = new Guid("e36cb2a2-ebb3-4abc-9ddb-1827b6babe23"),
                            BoardGameBuyUrl = "https://www.google.com/search?q=settlers+of+catan",
                            BoardGameDescription = "A classic strategy game where players collect resources and build settlements.",
                            BoardGameGenre = "Strategy",
                            BoardGameName = "Settlers of Catan"
                        },
                        new
                        {
                            BoardGameId = new Guid("c44c6a3a-5949-4646-ab24-bada68c0b48f"),
                            BoardGameBuyUrl = "https://www.google.com/search?q=Ticket+to+Ride",
                            BoardGameDescription = "A railroad-themed board game where players build train routes across North America.",
                            BoardGameGenre = "Family",
                            BoardGameName = "Ticket to Ride"
                        },
                        new
                        {
                            BoardGameId = new Guid("153c612a-4192-4b05-9d1b-565f1323aaa5"),
                            BoardGameBuyUrl = "https://www.google.com/search?q=Chess+board+game",
                            BoardGameDescription = "An ancient strategy game played on an 8x8 grid where players aim to capture the opponent's king.",
                            BoardGameGenre = "Strategy",
                            BoardGameName = "Chess"
                        },
                        new
                        {
                            BoardGameId = new Guid("76eaeee7-82e4-4269-aaa1-aee419ca334b"),
                            BoardGameBuyUrl = "https://www.google.com/search?q=Scrabble",
                            BoardGameDescription = "A word game where players form words crossword-style on a game board using letter tiles.",
                            BoardGameGenre = "Word",
                            BoardGameName = "Scrabble"
                        },
                        new
                        {
                            BoardGameId = new Guid("b8cbbc78-98e2-4d31-9ebb-2016ac7c5431"),
                            BoardGameBuyUrl = "https://www.google.com/search?q=Risk+board+game",
                            BoardGameDescription = "A classic strategy game of global domination where players aim to conquer territories.",
                            BoardGameGenre = "Strategy",
                            BoardGameName = "Risk"
                        },
                        new
                        {
                            BoardGameId = new Guid("afdbe0a4-9f3c-48ff-aaee-fb2e206e48ab"),
                            BoardGameBuyUrl = "https://www.google.com/search?q=Codenames+board+game",
                            BoardGameDescription = "A social word game where players give one-word clues to guess words related to their team's color.",
                            BoardGameGenre = "Party",
                            BoardGameName = "Codenames"
                        },
                        new
                        {
                            BoardGameId = new Guid("7532dec8-9115-4d21-bae3-fa1db4858fa7"),
                            BoardGameBuyUrl = "https://www.google.com/search?q=Azul+Board_game",
                            BoardGameDescription = "A tile-placement game where players compete to create the most beautiful mosaic.",
                            BoardGameGenre = "Abstract",
                            BoardGameName = "Azul"
                        });
                });

            modelBuilder.Entity("CSharpBackend.API.Models.Domain.Match", b =>
                {
                    b.Property<Guid>("MatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("chosenBoardGame")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("chosenBoardGameGenre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("matchDurationInSeconds")
                        .HasColumnType("int");

                    b.Property<float>("opponentAttacksPerRound")
                        .HasColumnType("real");

                    b.Property<float>("playerAttacksPerRound")
                        .HasColumnType("real");

                    b.Property<bool>("playerWonThisMatch")
                        .HasColumnType("bit");

                    b.HasKey("MatchId");

                    b.ToTable("Matches");
                });
#pragma warning restore 612, 618
        }
    }
}
